:javascript
  $.fn.addTempClass = function(tempClass, duration){
      if( !tempClass )
          return this;

      return this.each(function(){
          var $elm = $(this);

          $elm.addClass(tempClass);
          setTimeout(function(){
            $elm.removeClass(tempClass);
          }, duration || 100);
      });
  }

  $( document ).ready(function() {
    var Logger = function(options){
      var self = this;
      self.active = false;
      self.tick = 3000;
      self.last_tick;
      self.max_rows = 10;

      self.sync = function(){
        $.get( "sync_time.json",function( data,status,xhr ){
          self.synced_time = new Date(data).getTime();
          self.last_tick = self.synced_time;
        });
      };

      self.update =  function(){

        self.sync();
        if(self.active){
          var date = new Date().getTime();
          date = new Date(date - self.tick).getTime();
          if(typeof self.synced_time != "undefined"){
            var diff = new Date().getTime() - self.last_tick;
            self.last_tick = new Date().getTime();

            date = self.synced_time;
            self.synced_time += diff;
          }

          $.get( "logger",{start: date}, function( data,status,xhr ){
            self.displaylog(data);
          });
        }
        setTimeout(function(){self.update()}, self.tick);
      };

      self.displaylog = function(logs){
        if(logs.length > 0){
          for(var i in logs){
            logs[i].log = JSON.stringify(logs[i], null, ' ');
            var temp = ich.log(logs[i]);
            self.appendLog(temp);
          }
        }else{
          var data = {
            key: "No Logs",
            name: "---",
            user_id: "-",
            timestamp: "---",
          };

          data.log= JSON.stringify(data, null, ' ');
          var temp = ich.log(data);
          self.appendLog(temp);
        }
      };

      self.appendLog = function(log){
        var t = $('tbody').append(log);
        $(".rows > tr:last").addTempClass("init",1000);
        var size = $(".rows > tr").length;

        if(size>self.max_rows){
          var diff = size - self.max_rows -1;
          $('tbody > tr').not(':gt(' + diff + ')').fadeOut(400);
        }

        $(".rows > tr:last").mouseover(function(){
          $(this).find(".log").show();
        })
        .mouseout(function(){
          $(this).find(".log").hide();
        });
      }

      self.enabled = function(){
        self.sync();
        self.active = true;
      };
      self.disabled = function(){
        self.active = false;
      };

      function Logger(){
        self.sync();
        self.update();
      };

      return Logger();
    }

    var log = new Logger();
    $("#start").click(function(){
      log.enabled();
    });
    $("#stop-button").click(function(){
      log.disabled();
    });
    $("#clear").click(function(){
      $('tbody').text("");
    });
  });


:plain
  <script id="log" type="text/html">
    <tr>
      <td>{{ key }}</td>
      <td>{{ name }}</td>
      <td>{{ user_id }}</td>
      <td>{{ timestamp }}</td>
      <td class="log"><pre>{{ log }}</pre></td>
    </tr>
  </script>

%h3 Log Debugger
%div.container.col-md-2
  %button.btn.btn-info#clear Clear
  %button.btn.btn-succes#start Start
  %button.btn.btn-danger#stop-button Stop

%div#logger
  %table.table.table-responsive
    %thead
      %tr
        %th key
        %th name
        %th user_id
        %th timestamp
    %tbody.rows

